

# This is a basic workflow that will start a build with every push


name: CI Run tests


# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
  pull_request:
    branches: [ dev,test,prod ]
    types:
      - opened
      - edited
      - synchronize
      - reopened
  workflow_call:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      matrix:
        include:
          - imagename: "workbc-wage-subsidy-v2-static"
            context: "./packages/static"
            env: true
          - imagename: "workbc-wage-subsidy-v2-admin-api"
            context: "./packages/admin-api"
            env: false
          - imagename: "workbc-wage-subsidy-v2-admin-client"
            context: "./packages/admin-client"
            packagelock: "./package-lock.json"
            env: true
          - imagename: "workbc-wage-subsidy-v2-employer-client"
            context: "./packages/employer-client"
            packagelock: "./packages/employer-client/package-lock.json"
            env: true
          - imagename: "workbc-wage-subsidy-v2-employer-api"
            context: "./packages/employer-api"
            env: false
          - imagename: "workbc-wage-subsidy-v2-form-api"
            context: "./packages/form-api"
            env: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.packagelock }}
      - name: Install Monorepo Dependancies
        run: npm install
        env:
          REACT_ADMIN_TOKEN: ${{ secrets.REACT_ADMIN_TOKEN }}
          FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}
      - name: Install Dependancies
        working-directory: ${{ matrix.context }}
        run: npm install
        env:
          REACT_ADMIN_TOKEN: ${{ secrets.REACT_ADMIN_TOKEN }}
          FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}
      - name: Run Unit Tests
        working-directory: ${{ matrix.context }}
        run: npm run test
        env:
          REACT_ADMIN_TOKEN: ${{ secrets.REACT_ADMIN_TOKEN }}
          FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}
